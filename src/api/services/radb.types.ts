/*
 * DO NOT EDIT THIS FILE MANUALLY
 * This file was generated by a tool.
 * Rerun yarn codegen to regenerate this file.
 */
import * as zod from "zod";
export interface Tables {
  acc_reg_num: AccRegNumEntity;
  acc_reg_str: AccRegStrEntity;
  achievement: AchievementEntity;
  atcommandlog: AtcommandlogEntity;
  auction: AuctionEntity;
  barter: BarterEntity;
  bonus_script: BonusScriptEntity;
  branchlog: BranchlogEntity;
  buyingstore_items: BuyingstoreItemsEntity;
  buyingstores: BuyingstoresEntity;
  cart_inventory: CartInventoryEntity;
  cashlog: CashlogEntity;
  char: CharEntity;
  char_reg_num: CharRegNumEntity;
  char_reg_str: CharRegStrEntity;
  charlog: CharlogEntity;
  chatlog: ChatlogEntity;
  clan: ClanEntity;
  clan_alliance: ClanAllianceEntity;
  db_roulette: DbRouletteEntity;
  elemental: ElementalEntity;
  feedinglog: FeedinglogEntity;
  friends: FriendsEntity;
  global_acc_reg_num: GlobalAccRegNumEntity;
  global_acc_reg_str: GlobalAccRegStrEntity;
  guild: GuildEntity;
  guild_alliance: GuildAllianceEntity;
  guild_castle: GuildCastleEntity;
  guild_expulsion: GuildExpulsionEntity;
  guild_member: GuildMemberEntity;
  guild_position: GuildPositionEntity;
  guild_skill: GuildSkillEntity;
  guild_storage: GuildStorageEntity;
  guild_storage_log: GuildStorageLogEntity;
  homunculus: HomunculusEntity;
  hotkey: HotkeyEntity;
  interlog: InterlogEntity;
  inventory: InventoryEntity;
  ipbanlist: IpbanlistEntity;
  login: LoginEntity;
  loginlog: LoginlogEntity;
  mail: MailEntity;
  mail_attachments: MailAttachmentsEntity;
  mapreg: MapregEntity;
  market: MarketEntity;
  memo: MemoEntity;
  mercenary: MercenaryEntity;
  mercenary_owner: MercenaryOwnerEntity;
  mvplog: MvplogEntity;
  npclog: NpclogEntity;
  party: PartyEntity;
  pet: PetEntity;
  picklog: PicklogEntity;
  quest: QuestEntity;
  sales: SalesEntity;
  sc_data: ScDataEntity;
  skill: SkillEntity;
  skill_homunculus: SkillHomunculusEntity;
  skillcooldown: SkillcooldownEntity;
  storage: StorageEntity;
  vending_items: VendingItemsEntity;
  vendings: VendingsEntity;
  zenylog: ZenylogEntity;
}
export type AccRegNumEntity = zod.infer<typeof AccRegNumEntityType>;
export const AccRegNumEntityType = zod.object({
  account_id: zod.number(),
  index: zod.number(),
  key: zod.string(),
  value: zod.string(),
});
export type AccRegStrEntity = zod.infer<typeof AccRegStrEntityType>;
export const AccRegStrEntityType = zod.object({
  account_id: zod.number(),
  index: zod.number(),
  key: zod.string(),
  value: zod.string(),
});
export type AchievementEntity = zod.infer<typeof AchievementEntityType>;
export const AchievementEntityType = zod.object({
  char_id: zod.number(),
  completed: zod.date().nullable(),
  count1: zod.number(),
  count10: zod.number(),
  count2: zod.number(),
  count3: zod.number(),
  count4: zod.number(),
  count5: zod.number(),
  count6: zod.number(),
  count7: zod.number(),
  count8: zod.number(),
  count9: zod.number(),
  id: zod.string(),
  rewarded: zod.date().nullable(),
});
export type AtcommandlogEntity = zod.infer<typeof AtcommandlogEntityType>;
export const AtcommandlogEntityType = zod.object({
  account_id: zod.number(),
  atcommand_date: zod.date(),
  atcommand_id: zod.number(),
  char_id: zod.number(),
  char_name: zod.string(),
  command: zod.string(),
  map: zod.string(),
});
export type AuctionEntity = zod.infer<typeof AuctionEntityType>;
export const AuctionEntityType = zod.object({
  attribute: zod.number(),
  auction_id: zod.string(),
  buyer_id: zod.number(),
  buyer_name: zod.string(),
  buynow: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  enchantgrade: zod.number(),
  hours: zod.number(),
  item_name: zod.string(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  price: zod.number(),
  refine: zod.number(),
  seller_id: zod.number(),
  seller_name: zod.string(),
  timestamp: zod.number(),
  type: zod.number(),
  unique_id: zod.string(),
});
export type BarterEntity = zod.infer<typeof BarterEntityType>;
export const BarterEntityType = zod.object({
  amount: zod.number(),
  index: zod.number(),
  name: zod.string(),
});
export type BonusScriptEntity = zod.infer<typeof BonusScriptEntityType>;
export const BonusScriptEntityType = zod.object({
  char_id: zod.number(),
  flag: zod.number(),
  icon: zod.number(),
  script: zod.string(),
  tick: zod.string(),
  type: zod.number(),
});
export type BranchlogEntity = zod.infer<typeof BranchlogEntityType>;
export const BranchlogEntityType = zod.object({
  account_id: zod.number(),
  branch_date: zod.date(),
  branch_id: zod.number(),
  char_id: zod.number(),
  char_name: zod.string(),
  map: zod.string(),
});
export type BuyingstoreItemsEntity = zod.infer<
  typeof BuyingstoreItemsEntityType
>;
export const BuyingstoreItemsEntityType = zod.object({
  amount: zod.number(),
  buyingstore_id: zod.number(),
  index: zod.number(),
  item_id: zod.number(),
  price: zod.number(),
});
export type BuyingstoresEntity = zod.infer<typeof BuyingstoresEntityType>;
export const BuyingstoresEntityType = zod.object({
  account_id: zod.number(),
  autotrade: zod.number(),
  body_direction: zod.string(),
  char_id: zod.number(),
  head_direction: zod.string(),
  id: zod.number(),
  limit: zod.number(),
  map: zod.string(),
  sex: zod.number(),
  sit: zod.string(),
  title: zod.string(),
  x: zod.number(),
  y: zod.number(),
});
export type CartInventoryEntity = zod.infer<typeof CartInventoryEntityType>;
export const CartInventoryEntityType = zod.object({
  amount: zod.number(),
  attribute: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  char_id: zod.number(),
  enchantgrade: zod.number(),
  equip: zod.number(),
  expire_time: zod.number(),
  id: zod.number(),
  identify: zod.number(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  unique_id: zod.string(),
});
export type CashlogEntity = zod.infer<typeof CashlogEntityType>;
export const CashlogEntityType = zod.object({
  amount: zod.number(),
  cash_type: zod.number(),
  char_id: zod.number(),
  id: zod.number(),
  map: zod.string(),
  time: zod.date(),
  type: zod.number(),
});
export type CharEntity = zod.infer<typeof CharEntityType>;
export const CharEntityType = zod.object({
  account_id: zod.number(),
  agi: zod.number(),
  ap: zod.number(),
  base_exp: zod.string(),
  base_level: zod.number(),
  body: zod.number(),
  char_id: zod.number(),
  char_num: zod.number(),
  child: zod.number(),
  clan_id: zod.number(),
  class: zod.number(),
  clothes_color: zod.number(),
  con: zod.number(),
  crt: zod.number(),
  delete_date: zod.number(),
  dex: zod.number(),
  elemental_id: zod.number(),
  fame: zod.number(),
  father: zod.number(),
  font: zod.number(),
  guild_id: zod.number(),
  hair: zod.number(),
  hair_color: zod.number(),
  head_bottom: zod.number(),
  head_mid: zod.number(),
  head_top: zod.number(),
  homun_id: zod.number(),
  hotkey_rowshift: zod.number(),
  hotkey_rowshift2: zod.number(),
  hp: zod.number(),
  int: zod.number(),
  inventory_slots: zod.number(),
  job_exp: zod.string(),
  job_level: zod.number(),
  karma: zod.number(),
  last_login: zod.date().nullable(),
  last_map: zod.string(),
  last_x: zod.number(),
  last_y: zod.number(),
  luk: zod.number(),
  manner: zod.number(),
  max_ap: zod.number(),
  max_hp: zod.number(),
  max_sp: zod.number(),
  mother: zod.number(),
  moves: zod.number(),
  name: zod.string(),
  online: zod.number(),
  option: zod.number(),
  partner_id: zod.number(),
  party_id: zod.number(),
  pet_id: zod.number(),
  pow: zod.number(),
  rename: zod.number(),
  robe: zod.number(),
  save_map: zod.string(),
  save_x: zod.number(),
  save_y: zod.number(),
  sex: zod.number(),
  shield: zod.number(),
  show_equip: zod.number(),
  skill_point: zod.number(),
  sp: zod.number(),
  spl: zod.number(),
  sta: zod.number(),
  status_point: zod.number(),
  str: zod.number(),
  title_id: zod.number(),
  trait_point: zod.number(),
  unban_time: zod.number(),
  uniqueitem_counter: zod.number(),
  vit: zod.number(),
  weapon: zod.number(),
  wis: zod.number(),
  zeny: zod.number(),
});
export type CharRegNumEntity = zod.infer<typeof CharRegNumEntityType>;
export const CharRegNumEntityType = zod.object({
  char_id: zod.number(),
  index: zod.number(),
  key: zod.string(),
  value: zod.string(),
});
export type CharRegStrEntity = zod.infer<typeof CharRegStrEntityType>;
export const CharRegStrEntityType = zod.object({
  char_id: zod.number(),
  index: zod.number(),
  key: zod.string(),
  value: zod.string(),
});
export type CharlogEntity = zod.infer<typeof CharlogEntityType>;
export const CharlogEntityType = zod.object({
  account_id: zod.number(),
  agi: zod.number(),
  char_msg: zod.string(),
  char_num: zod.number(),
  dex: zod.number(),
  hair: zod.number(),
  hair_color: zod.number(),
  id: zod.string(),
  int: zod.number(),
  luk: zod.number(),
  name: zod.string(),
  str: zod.number(),
  time: zod.date(),
  vit: zod.number(),
});
export type ChatlogEntity = zod.infer<typeof ChatlogEntityType>;
export const ChatlogEntityType = zod.object({
  dst_charname: zod.string(),
  id: zod.string(),
  message: zod.string(),
  src_accountid: zod.number(),
  src_charid: zod.number(),
  src_map: zod.string(),
  src_map_x: zod.number(),
  src_map_y: zod.number(),
  time: zod.date(),
  type: zod.number(),
  type_id: zod.number(),
});
export type ClanEntity = zod.infer<typeof ClanEntityType>;
export const ClanEntityType = zod.object({
  clan_id: zod.number(),
  mapname: zod.string(),
  master: zod.string(),
  max_member: zod.number(),
  name: zod.string(),
});
export type ClanAllianceEntity = zod.infer<typeof ClanAllianceEntityType>;
export const ClanAllianceEntityType = zod.object({
  alliance_id: zod.number(),
  clan_id: zod.number(),
  name: zod.string(),
  opposition: zod.number(),
});
export type DbRouletteEntity = zod.infer<typeof DbRouletteEntityType>;
export const DbRouletteEntityType = zod.object({
  amount: zod.number(),
  flag: zod.number(),
  index: zod.number(),
  item_id: zod.number(),
  level: zod.number(),
});
export type ElementalEntity = zod.infer<typeof ElementalEntityType>;
export const ElementalEntityType = zod.object({
  aspd: zod.number(),
  atk1: zod.number(),
  atk2: zod.number(),
  char_id: zod.number(),
  class: zod.number(),
  def: zod.number(),
  ele_id: zod.number(),
  flee: zod.number(),
  hit: zod.number(),
  hp: zod.number(),
  life_time: zod.string(),
  matk: zod.number(),
  max_hp: zod.number(),
  max_sp: zod.number(),
  mdef: zod.number(),
  mode: zod.number(),
  sp: zod.number(),
});
export type FeedinglogEntity = zod.infer<typeof FeedinglogEntityType>;
export const FeedinglogEntityType = zod.object({
  char_id: zod.number(),
  id: zod.number(),
  intimacy: zod.number(),
  item_id: zod.number(),
  map: zod.string(),
  target_class: zod.number(),
  target_id: zod.number(),
  time: zod.date(),
  type: zod.number(),
  x: zod.number(),
  y: zod.number(),
});
export type FriendsEntity = zod.infer<typeof FriendsEntityType>;
export const FriendsEntityType = zod.object({
  char_id: zod.number(),
  friend_id: zod.number(),
});
export type GlobalAccRegNumEntity = zod.infer<typeof GlobalAccRegNumEntityType>;
export const GlobalAccRegNumEntityType = zod.object({
  account_id: zod.number(),
  index: zod.number(),
  key: zod.string(),
  value: zod.string(),
});
export type GlobalAccRegStrEntity = zod.infer<typeof GlobalAccRegStrEntityType>;
export const GlobalAccRegStrEntityType = zod.object({
  account_id: zod.number(),
  index: zod.number(),
  key: zod.string(),
  value: zod.string(),
});
export type GuildEntity = zod.infer<typeof GuildEntityType>;
export const GuildEntityType = zod.object({
  average_lv: zod.number(),
  char_id: zod.number(),
  connect_member: zod.number(),
  emblem_data: zod.unknown().nullable(),
  emblem_id: zod.number(),
  emblem_len: zod.number(),
  exp: zod.string(),
  guild_id: zod.number(),
  guild_lv: zod.number(),
  last_master_change: zod.date().nullable(),
  master: zod.string(),
  max_member: zod.number(),
  mes1: zod.string(),
  mes2: zod.string(),
  name: zod.string(),
  next_exp: zod.string(),
  skill_point: zod.number(),
});
export type GuildAllianceEntity = zod.infer<typeof GuildAllianceEntityType>;
export const GuildAllianceEntityType = zod.object({
  alliance_id: zod.number(),
  guild_id: zod.number(),
  name: zod.string(),
  opposition: zod.number(),
});
export type GuildCastleEntity = zod.infer<typeof GuildCastleEntityType>;
export const GuildCastleEntityType = zod.object({
  castle_id: zod.number(),
  createTime: zod.number(),
  defense: zod.number(),
  economy: zod.number(),
  guild_id: zod.number(),
  nextTime: zod.number(),
  payTime: zod.number(),
  triggerD: zod.number(),
  triggerE: zod.number(),
  visibleC: zod.number(),
  visibleG0: zod.number(),
  visibleG1: zod.number(),
  visibleG2: zod.number(),
  visibleG3: zod.number(),
  visibleG4: zod.number(),
  visibleG5: zod.number(),
  visibleG6: zod.number(),
  visibleG7: zod.number(),
});
export type GuildExpulsionEntity = zod.infer<typeof GuildExpulsionEntityType>;
export const GuildExpulsionEntityType = zod.object({
  account_id: zod.number(),
  guild_id: zod.number(),
  mes: zod.string(),
  name: zod.string(),
});
export type GuildMemberEntity = zod.infer<typeof GuildMemberEntityType>;
export const GuildMemberEntityType = zod.object({
  char_id: zod.number(),
  exp: zod.string(),
  guild_id: zod.number(),
  position: zod.number(),
});
export type GuildPositionEntity = zod.infer<typeof GuildPositionEntityType>;
export const GuildPositionEntityType = zod.object({
  exp_mode: zod.number(),
  guild_id: zod.number(),
  mode: zod.number(),
  name: zod.string(),
  position: zod.number(),
});
export type GuildSkillEntity = zod.infer<typeof GuildSkillEntityType>;
export const GuildSkillEntityType = zod.object({
  guild_id: zod.number(),
  id: zod.number(),
  lv: zod.number(),
});
export type GuildStorageEntity = zod.infer<typeof GuildStorageEntityType>;
export const GuildStorageEntityType = zod.object({
  amount: zod.number(),
  attribute: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  enchantgrade: zod.number(),
  equip: zod.number(),
  expire_time: zod.number(),
  guild_id: zod.number(),
  id: zod.number(),
  identify: zod.number(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  unique_id: zod.string(),
});
export type GuildStorageLogEntity = zod.infer<typeof GuildStorageLogEntityType>;
export const GuildStorageLogEntityType = zod.object({
  amount: zod.number(),
  attribute: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  char_id: zod.number(),
  enchantgrade: zod.number(),
  expire_time: zod.number(),
  guild_id: zod.number(),
  id: zod.number(),
  identify: zod.number(),
  name: zod.string(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  time: zod.date(),
  unique_id: zod.string(),
});
export type HomunculusEntity = zod.infer<typeof HomunculusEntityType>;
export const HomunculusEntityType = zod.object({
  agi: zod.number(),
  alive: zod.number(),
  autofeed: zod.number(),
  char_id: zod.number(),
  class: zod.number(),
  dex: zod.number(),
  exp: zod.string(),
  homun_id: zod.number(),
  hp: zod.number(),
  hunger: zod.number(),
  int: zod.number(),
  intimacy: zod.number(),
  level: zod.number(),
  luk: zod.number(),
  max_hp: zod.number(),
  max_sp: zod.number(),
  name: zod.string(),
  prev_class: zod.number(),
  rename_flag: zod.number(),
  skill_point: zod.number(),
  sp: zod.number(),
  str: zod.number(),
  vaporize: zod.number(),
  vit: zod.number(),
});
export type HotkeyEntity = zod.infer<typeof HotkeyEntityType>;
export const HotkeyEntityType = zod.object({
  char_id: zod.number(),
  hotkey: zod.number(),
  itemskill_id: zod.number(),
  skill_lvl: zod.number(),
  type: zod.number(),
});
export type InterlogEntity = zod.infer<typeof InterlogEntityType>;
export const InterlogEntityType = zod.object({
  id: zod.number(),
  log: zod.string(),
  time: zod.date(),
});
export type InventoryEntity = zod.infer<typeof InventoryEntityType>;
export const InventoryEntityType = zod.object({
  amount: zod.number(),
  attribute: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  char_id: zod.number(),
  enchantgrade: zod.number(),
  equip: zod.number(),
  equip_switch: zod.number(),
  expire_time: zod.number(),
  favorite: zod.number(),
  id: zod.number(),
  identify: zod.number(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  unique_id: zod.string(),
});
export type IpbanlistEntity = zod.infer<typeof IpbanlistEntityType>;
export const IpbanlistEntityType = zod.object({
  btime: zod.date(),
  list: zod.string(),
  reason: zod.string(),
  rtime: zod.date(),
});
export type LoginEntity = zod.infer<typeof LoginEntityType>;
export const LoginEntityType = zod.object({
  account_id: zod.number(),
  birthdate: zod.date().nullable(),
  character_slots: zod.number(),
  email: zod.string(),
  expiration_time: zod.number(),
  group_id: zod.number(),
  last_ip: zod.string(),
  lastlogin: zod.date().nullable(),
  logincount: zod.number(),
  old_group: zod.number(),
  pincode: zod.string(),
  pincode_change: zod.number(),
  sex: zod.number(),
  state: zod.number(),
  unban_time: zod.number(),
  user_pass: zod.string(),
  userid: zod.string(),
  vip_time: zod.number(),
  web_auth_token: zod.string().nullable(),
  web_auth_token_enabled: zod.number(),
});
export type LoginlogEntity = zod.infer<typeof LoginlogEntityType>;
export const LoginlogEntityType = zod.object({
  ip: zod.string(),
  log: zod.string(),
  rcode: zod.number(),
  time: zod.date(),
  user: zod.string(),
});
export type MailEntity = zod.infer<typeof MailEntityType>;
export const MailEntityType = zod.object({
  dest_id: zod.number(),
  dest_name: zod.string(),
  id: zod.string(),
  message: zod.string(),
  send_id: zod.number(),
  send_name: zod.string(),
  status: zod.number(),
  time: zod.number(),
  title: zod.string(),
  type: zod.number(),
  zeny: zod.number(),
});
export type MailAttachmentsEntity = zod.infer<typeof MailAttachmentsEntityType>;
export const MailAttachmentsEntityType = zod.object({
  amount: zod.number(),
  attribute: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  enchantgrade: zod.number(),
  id: zod.string(),
  identify: zod.number(),
  index: zod.number(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  unique_id: zod.string(),
});
export type MapregEntity = zod.infer<typeof MapregEntityType>;
export const MapregEntityType = zod.object({
  index: zod.number(),
  value: zod.string(),
  varname: zod.string(),
});
export type MarketEntity = zod.infer<typeof MarketEntityType>;
export const MarketEntityType = zod.object({
  amount: zod.number(),
  flag: zod.number(),
  name: zod.string(),
  nameid: zod.number(),
  price: zod.number(),
});
export type MemoEntity = zod.infer<typeof MemoEntityType>;
export const MemoEntityType = zod.object({
  char_id: zod.number(),
  map: zod.string(),
  memo_id: zod.number(),
  x: zod.number(),
  y: zod.number(),
});
export type MercenaryEntity = zod.infer<typeof MercenaryEntityType>;
export const MercenaryEntityType = zod.object({
  char_id: zod.number(),
  class: zod.number(),
  hp: zod.number(),
  kill_counter: zod.number(),
  life_time: zod.string(),
  mer_id: zod.number(),
  sp: zod.number(),
});
export type MercenaryOwnerEntity = zod.infer<typeof MercenaryOwnerEntityType>;
export const MercenaryOwnerEntityType = zod.object({
  arch_calls: zod.number(),
  arch_faith: zod.number(),
  char_id: zod.number(),
  merc_id: zod.number(),
  spear_calls: zod.number(),
  spear_faith: zod.number(),
  sword_calls: zod.number(),
  sword_faith: zod.number(),
});
export type MvplogEntity = zod.infer<typeof MvplogEntityType>;
export const MvplogEntityType = zod.object({
  kill_char_id: zod.number(),
  map: zod.string(),
  monster_id: zod.number(),
  mvp_date: zod.date(),
  mvp_id: zod.number(),
  mvpexp: zod.string(),
  prize: zod.number(),
});
export type NpclogEntity = zod.infer<typeof NpclogEntityType>;
export const NpclogEntityType = zod.object({
  account_id: zod.number(),
  char_id: zod.number(),
  char_name: zod.string(),
  map: zod.string(),
  mes: zod.string(),
  npc_date: zod.date(),
  npc_id: zod.number(),
});
export type PartyEntity = zod.infer<typeof PartyEntityType>;
export const PartyEntityType = zod.object({
  exp: zod.number(),
  item: zod.number(),
  leader_char: zod.number(),
  leader_id: zod.number(),
  name: zod.string(),
  party_id: zod.number(),
});
export type PetEntity = zod.infer<typeof PetEntityType>;
export const PetEntityType = zod.object({
  account_id: zod.number(),
  autofeed: zod.number(),
  char_id: zod.number(),
  class: zod.number(),
  egg_id: zod.number(),
  equip: zod.number(),
  hungry: zod.number(),
  incubate: zod.number(),
  intimate: zod.number(),
  level: zod.number(),
  name: zod.string(),
  pet_id: zod.number(),
  rename_flag: zod.number(),
});
export type PicklogEntity = zod.infer<typeof PicklogEntityType>;
export const PicklogEntityType = zod.object({
  amount: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  char_id: zod.number(),
  enchantgrade: zod.number(),
  id: zod.number(),
  map: zod.string(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  time: zod.date(),
  type: zod.number(),
  unique_id: zod.string(),
});
export type QuestEntity = zod.infer<typeof QuestEntityType>;
export const QuestEntityType = zod.object({
  char_id: zod.number(),
  count1: zod.number(),
  count2: zod.number(),
  count3: zod.number(),
  quest_id: zod.number(),
  state: zod.number(),
  time: zod.number(),
});
export type SalesEntity = zod.infer<typeof SalesEntityType>;
export const SalesEntityType = zod.object({
  amount: zod.number(),
  end: zod.date(),
  nameid: zod.number(),
  start: zod.date(),
});
export type ScDataEntity = zod.infer<typeof ScDataEntityType>;
export const ScDataEntityType = zod.object({
  account_id: zod.number(),
  char_id: zod.number(),
  tick: zod.string(),
  type: zod.number(),
  val1: zod.number(),
  val2: zod.number(),
  val3: zod.number(),
  val4: zod.number(),
});
export type SkillEntity = zod.infer<typeof SkillEntityType>;
export const SkillEntityType = zod.object({
  char_id: zod.number(),
  flag: zod.number(),
  id: zod.number(),
  lv: zod.number(),
});
export type SkillHomunculusEntity = zod.infer<typeof SkillHomunculusEntityType>;
export const SkillHomunculusEntityType = zod.object({
  homun_id: zod.number(),
  id: zod.number(),
  lv: zod.number(),
});
export type SkillcooldownEntity = zod.infer<typeof SkillcooldownEntityType>;
export const SkillcooldownEntityType = zod.object({
  account_id: zod.number(),
  char_id: zod.number(),
  skill: zod.number(),
  tick: zod.string(),
});
export type StorageEntity = zod.infer<typeof StorageEntityType>;
export const StorageEntityType = zod.object({
  account_id: zod.number(),
  amount: zod.number(),
  attribute: zod.number(),
  bound: zod.number(),
  card0: zod.number(),
  card1: zod.number(),
  card2: zod.number(),
  card3: zod.number(),
  enchantgrade: zod.number(),
  equip: zod.number(),
  expire_time: zod.number(),
  id: zod.number(),
  identify: zod.number(),
  nameid: zod.number(),
  option_id0: zod.number(),
  option_id1: zod.number(),
  option_id2: zod.number(),
  option_id3: zod.number(),
  option_id4: zod.number(),
  option_parm0: zod.number(),
  option_parm1: zod.number(),
  option_parm2: zod.number(),
  option_parm3: zod.number(),
  option_parm4: zod.number(),
  option_val0: zod.number(),
  option_val1: zod.number(),
  option_val2: zod.number(),
  option_val3: zod.number(),
  option_val4: zod.number(),
  refine: zod.number(),
  unique_id: zod.string(),
});
export type VendingItemsEntity = zod.infer<typeof VendingItemsEntityType>;
export const VendingItemsEntityType = zod.object({
  amount: zod.number(),
  cartinventory_id: zod.number(),
  index: zod.number(),
  price: zod.number(),
  vending_id: zod.number(),
});
export type VendingsEntity = zod.infer<typeof VendingsEntityType>;
export const VendingsEntityType = zod.object({
  account_id: zod.number(),
  autotrade: zod.number(),
  body_direction: zod.string(),
  char_id: zod.number(),
  head_direction: zod.string(),
  id: zod.number(),
  map: zod.string(),
  sex: zod.number(),
  sit: zod.string(),
  title: zod.string(),
  x: zod.number(),
  y: zod.number(),
});
export type ZenylogEntity = zod.infer<typeof ZenylogEntityType>;
export const ZenylogEntityType = zod.object({
  amount: zod.number(),
  char_id: zod.number(),
  id: zod.number(),
  map: zod.string(),
  src_id: zod.number(),
  time: zod.date(),
  type: zod.number(),
});
